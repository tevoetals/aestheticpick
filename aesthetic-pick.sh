#!/usr/bin/env bash
set -euo pipefail

# ============================
#  AESTHETIC-PICK (picker)                            # se√ß√£o: menu com r√≥tulos estilizados
#  Arquivo: ~/.local/bin/aesthetic-pick               # caminho esperado pelo atalho e .desktop
#  Sa√≠da: vari√°vel $selection (nome do estilo); sai 1 se cancelar
# ============================

# ---------- ordem can√¥nica dos estilos (chave t√©cnica) ----------
order=(                                              # ordem que ser√° usada para mapear √≠ndice‚Üíestilo
  mini                                              # 0
  oldenglish                                        # 1
  oldenglishbold                                    # 2
  handwriting                                       # 3
  handwritingbold                                   # 4
  chanfrado                                         # 5
  evensized                                         # 6
  inverse                                           # 7
  blackboxed                                        # 8
  circleboxed                                       # 9
  serifbold                                         # 10
  italic                                            # 11
  bold                                              # 12
  mono                                              # 13
  witched                                           # 14
)

# ---------- r√≥tulos renderizados para exibir no rofi ----------
declare -A label                                    # mapa: estilo ‚Üí r√≥tulo bonito exibido no menu
label[mini]='·¥π‚Å±‚Åø‚Å±'                                  # Mini
label[oldenglish]='ùîíùî©ùî° ùîàùî´ùî§ùî©ùî¶ùî∞ùî•'                    # Fraktur normal
label[oldenglishbold]='ùï∫ùñëùñâ ùï∞ùñìùñåùñëùñéùñòùñç ùï≠ùñîùñëùñâ'          # Fraktur negrito
label[handwriting]='ùìóùì™ùì∑ùì≠ ùì¶ùìªùì≤ùìΩùì≤ùì∑ùì∞'                # Script/caligrafia
label[handwritingbold]='ùêªùí∂ùìÉùíπ ùí≤ùìáùíæùìâùíæùìÉùëî ùêµùëúùìÅùíπ'        # Script negrito
label[chanfrado]='‚ÑÇùïôùïíùïüùïóùï£ùïíùïïùï†'                        # Double-struck
label[evensized]='·¥á·¥†·¥á…¥Íú±…™·¥¢·¥á·¥Ö'                        # Small-caps
label[inverse]='«ùs…π«ù åuI'                             # Invertido (texto invertido como preview)
label[blackboxed]='üÖ±üÖªüÖ∞üÖ≤üÖ∫ üÖ±üÖæüÜáüÖ¥üÖ≥'                # BLACK BOXED
label[circleboxed]='‚í∏‚ìò‚ì°‚ìí‚ìõ‚ìî ‚í∑‚ìû‚ìß‚ìî‚ìì'                 # CIRCLE BOXED
label[serifbold]='ùêíùêûùê´ùê¢ùêü ùêÅùê®ùê•ùêù'                       # Serif Bold matem√°tico
label[italic]='ùòêùòµùò¢ùò≠ùò™ùò§'                               # It√°lico matem√°tico
label[bold]='ùòΩùô§ùô°ùôô'                                   # Sans-serif bold/italic
label[mono]='ùôºùöòùöóùöò'                                   # Monoespa√ßado
label[witched]='W“âi“ât“âc“âh“âe“âd“â'                       # Witched

# ---------- alimenta o rofi e recupera o √≠ndice escolhido ----------
menu_content="$(printf '%s\n' "${order[@]}" | while read -r k; do printf '%s\n' "${label[$k]}"; done)"  # lista de r√≥tulos
idx="$(
  printf '%s\n' "$menu_content" \
  | /usr/bin/rofi -no-config -dmenu -i -p 'Aesthetic' -no-custom -format i -lines 15 -width 36 -selected-row 0 \
                  -theme "$HOME/.local/bin/aesthetic-black.rasi"            # -format i: retorna o √≠ndice da linha
)"
[[ "${idx:-"-1"}" == "-1" ]] && exit 1                                      # cancelado ‚Üí sai 1
selection="${order[$idx]}"                                                  # mapeia √≠ndice ‚Üí nome t√©cnico do estilo

# ============================
#  AESTHETIC-APPLY (Wayland/X11)                   # captura PRIM√ÅRIA e aplica mapeamento/colagem
# ============================

# ---------- detec√ß√£o de sess√£o e bin√°rios ----------
SESSION_TYPE="${XDG_SESSION_TYPE:-}"                                        # l√™ tipo de sess√£o (x11|wayland|vazio)
ROFI_BIN="/usr/bin/rofi"                                                    # caminho do rofi (n√£o usado abaixo; refer√™ncia)
command -v xclip   >/dev/null 2>&1 || true                                  # checagem opcional (X11)
command -v xdotool >/dev/null 2>&1 || true                                  # checagem opcional (X11)
command -v wl-paste>/dev/null 2>&1 || true                                  # checagem opcional (Wayland)

# ---------- captura da sele√ß√£o PRIM√ÅRIA ----------
if [[ "${SESSION_TYPE}" == "x11" ]] && command -v xclip >/dev/null 2>&1; then
  INPUT="$(xclip -o -selection primary 2>/dev/null || true)"                # X11: l√™ PRIM√ÅRIA
elif [[ "${SESSION_TYPE}" == "wayland" ]] && command -v wl-paste >/dev/null 2>&1; then
  INPUT="$(wl-paste --primary 2>/dev/null || true)"                          # Wayland: l√™ PRIM√ÅRIA
else
  INPUT=""                                                                   # sem suporte de leitura
fi
[[ -z "${INPUT}" ]] && exit 0                                                # nada selecionado ‚Üí nada a fazer

# ---------- utilit√°rio de mapeamento 1:1 ----------
map_with_pairs() {                                                           # aplica pares k=v preservando n√£o mapeados
  local text="$1"; shift                                                     # $1 texto; demais = pares k=v
  declare -A M=(); local p k v                                              # mapa e tmp
  for p in "$@"; do k="${p%%=*}"; v="${p#*=}"; [[ -n "$k" ]] && M["$k"]="$v"; done  # carrega mapa
  local out=""; local i ch                                                  # acumulador e cursores
  for ((i=0; i<${#text}; i++)); do                                          # percorre (ASCII de interesse)
    ch="${text:i:1}"                                                        # caractere atual
    if [[ -n "${M[$ch]+_}" ]]; then out+="${M[$ch]}"; else out+="$ch"; fi   # substitui ou mant√©m
  done
  printf '%s' "$out"                                                        # retorna convertido
}

# ---------- tabelas (estilos) ----------
build_pairs_serifbold() {                                                    # serif bold: a‚Äìz A‚ÄìZ 0‚Äì9
  cat <<'EOF'
a=ùêö b=ùêõ c=ùêú d=ùêù e=ùêû f=ùêü g=ùê† h=ùê° i=ùê¢ j=ùê£ k=ùê§ l=ùê• m=ùê¶ n=ùêß o=ùê® p=ùê© q=ùê™ r=ùê´ s=ùê¨ t=ùê≠ u=ùêÆ v=ùêØ w=ùê∞ x=ùê± y=ùê≤ z=ùê≥
A=ùêÄ B=ùêÅ C=ùêÇ D=ùêÉ E=ùêÑ F=ùêÖ G=ùêÜ H=ùêá I=ùêà J=ùêâ K=ùêä L=ùêã M=ùêå N=ùêç O=ùêé P=ùêè Q=ùêê R=ùêë S=ùêí T=ùêì U=ùêî V=ùêï W=ùêñ X=ùêó Y=ùêò Z=ùêô
0=ùüé 1=ùüè 2=ùüê 3=ùüë 4=ùüí 5=ùüì 6=ùüî 7=ùüï 8=ùüñ 9=ùüó
EOF
}
build_pairs_italic() {                                                       # it√°lico: a‚Äìz A‚ÄìZ
  cat <<'EOF'
a=ùò¢ b=ùò£ c=ùò§ d=ùò• e=ùò¶ f=ùòß g=ùò® h=ùò© i=ùò™ j=ùò´ k=ùò¨ l=ùò≠ m=ùòÆ n=ùòØ o=ùò∞ p=ùò± q=ùò≤ r=ùò≥ s=ùò¥ t=ùòµ u=ùò∂ v=ùò∑ w=ùò∏ x=ùòπ y=ùò∫ z=ùòª
A=ùòà B=ùòâ C=ùòä D=ùòã E=ùòå F=ùòç G=ùòé H=ùòè I=ùòê J=ùòë K=ùòí L=ùòì M=ùòî N=ùòï O=ùòñ P=ùòó Q=ùòò R=ùòô S=ùòö T=ùòõ U=ùòú V=ùòù W=ùòû X=ùòü Y=ùò† Z=ùò°
EOF
}
build_pairs_mono() {                                                         # mono: a‚Äìz A‚ÄìZ
  cat <<'EOF'
a=ùöä b=ùöã c=ùöå d=ùöç e=ùöé f=ùöè g=ùöê h=ùöë i=ùöí j=ùöì k=ùöî l=ùöï m=ùöñ n=ùöó o=ùöò p=ùöô q=ùöö r=ùöõ s=ùöú t=ùöù u=ùöû v=ùöü w=ùö† x=ùö° y=ùö¢ z=ùö£
A=ùô∞ B=ùô± C=ùô≤ D=ùô≥ E=ùô¥ F=ùôµ G=ùô∂ H=ùô∑ I=ùô∏ J=ùôπ K=ùô∫ L=ùôª M=ùôº N=ùôΩ O=ùôæ P=ùôø Q=ùöÄ R=ùöÅ S=ùöÇ T=ùöÉ U=ùöÑ V=ùöÖ W=ùöÜ X=ùöá Y=ùöà Z=ùöâ
EOF
}
build_pairs_mini() {                                                         # mini: min√∫sculas+MAI√öSCULAS+d√≠gitos
  cat <<'EOF'
a=·µÉ b=·µá c=·∂ú d=·µà e=·µâ f=·∂† g=·µç h= ∞ i=‚Å± j= ≤ k=·µè l=À° m=·µê n=‚Åø o=·µí p=·µñ q=q r= ≥ s=À¢ t=·µó u=·µò v=·µõ w= ∑ x=À£ y= ∏ z=·∂ª
A=·¥¨ B=·¥Æ C=·∂ú D=·¥∞ E=·¥± F=·∂† G=·¥≥ H=·¥¥ I=·¥µ J=·¥∂ K=·¥∑ L=·¥∏ M=·¥π N=·¥∫ O=·¥º P=·¥æ Q=Q R=·¥ø S=À¢ T=·µÄ U=·µÅ V=‚±Ω W=·µÇ X=À£ Y= ∏ Z=·∂ª
0=‚Å∞ 1=¬π 2=¬≤ 3=¬≥ 4=‚Å¥ 5=‚Åµ 6=‚Å∂ 7=‚Å∑ 8=‚Å∏ 9=‚Åπ
EOF
}
build_pairs_bold() {                                                         # bold (sans-serif): a‚Äìz A‚ÄìZ
  cat <<'EOF'
a=ùôñ b=ùôó c=ùôò d=ùôô e=ùôö f=ùôõ g=ùôú h=ùôù i=ùôû j=ùôü k=ùô† l=ùô° m=ùô¢ n=ùô£ o=ùô§ p=ùô• q=ùô¶ r=ùôß s=ùô® t=ùô© u=ùô™ v=ùô´ w=ùô¨ x=ùô≠ y=ùôÆ z=ùôØ
A=ùòº B=ùòΩ C=ùòæ D=ùòø E=ùôÄ F=ùôÅ G=ùôÇ H=ùôÉ I=ùôÑ J=ùôÖ K=ùôÜ L=ùôá M=ùôà N=ùôâ O=ùôä P=ùôã Q=ùôå R=ùôç S=ùôé T=ùôè U=ùôê V=ùôë W=ùôí X=ùôì Y=ùôî Z=ùôï
EOF
}
build_pairs_italic_bold() {                                                  # italic bold (compat√≠vel com pedido anterior)
  cat <<'EOF'
a=ùôñ b=ùôó c=ùôò d=ùôô e=ùôö f=ùôõ g=ùôú h=ùôù i=ùôû j=ùôü k=ùô† l=ùô° m=ùô¢ n=ùô£ o=ùô§ p=ùô• q=ùô¶ r=ùôß s=ùô® t=ùô© u=ùô™ v=ùô´ w=ùô¨ x=ùô≠ y=ùôÆ z=ùôØ
A=ùòº B=ùòΩ C=ùòæ D=ùòø E=ùôÄ F=ùôÅ G=ùôÇ H=ùôÉ I=ùôÑ J=ùôÖ K=ùôÜ L=ùôá M=ùôà N=ùôâ O=ùôä P=ùôã Q=ùôå R=ùôç S=ùôé T=ùôè U=ùôê V=ùôë W=ùôí X=ùôì Y=ùôî Z=ùôï
EOF
}
build_pairs_fraktur() {                                                       # fraktur (oldenglish)
  cat <<'EOF'
a=ùîû b=ùîü c=ùî† d=ùî° e=ùî¢ f=ùî£ g=ùî§ h=ùî• i=ùî¶ j=ùîß k=ùî® l=ùî© m=ùî™ n=ùî´ o=ùî¨ p=ùî≠ q=ùîÆ r=ùîØ s=ùî∞ t=ùî± w=ùî¥ x=ùîµ y=ùî∂ z=ùî∑
A=ùîÑ B=ùîÖ C=‚Ñ≠ D=ùîá E=ùîà F=ùîâ G=ùîä H=‚Ñå I=‚Ñë J=ùîç K=ùîé L=ùîè M=ùîê N=ùîë O=ùîí P=ùîì Q=ùîî R=‚Ñú S=ùîñ T=ùîó W=ùîö X=ùîõ Y=ùîú Z=‚Ñ®
EOF
}
build_pairs_fraktur_bold() {                                                  # fraktur negrito (oldenglishbold)
  cat <<'EOF'
a=ùñÜ b=ùñá c=ùñà d=ùñâ e=ùñä f=ùñã g=ùñå h=ùñç i=ùñé j=ùñè k=ùñê l=ùñë m=ùñí n=ùñì o=ùñî p=ùñï q=ùññ r=ùñó s=ùñò t=ùñô w=ùñú x=ùñù y=ùñû z=ùñü
A=ùï¨ B=ùï≠ C=ùïÆ D=ùïØ E=ùï∞ F=ùï± G=ùï≤ H=ùï≥ I=ùï¥ J=ùïµ K=ùï∂ L=ùï∑ M=ùï∏ N=ùïπ O=ùï∫ P=ùïª Q=ùïº R=ùïΩ S=ùïæ T=ùïø W=ùñÇ X=ùñÉ Y=ùñÑ Z=ùñÖ
EOF
}
build_pairs_script() {                                                        # script (handwriting)
  cat <<'EOF'
a=ùì™ b=ùì´ c=ùì¨ d=ùì≠ e=ùìÆ f=ùìØ g=ùì∞ h=ùì± i=ùì≤ j=ùì≥ k=ùì¥ l=ùìµ m=ùì∂ n=ùì∑ o=ùì∏ p=ùìπ q=ùì∫ r=ùìª s=ùìº t=ùìΩ w=ùîÄ x=ùîÅ y=ùîÇ z=ùîÉ
A=ùìê B=ùìë C=ùìí D=ùìì E=ùìî F=ùìï G=ùìñ H=ùìó I=ùìò J=ùìô K=ùìö L=ùìõ M=ùìú N=ùìù O=ùìû P=ùìü Q=ùì† R=ùì° S=ùì¢ T=ùì£ W=ùì¶ X=ùìß Y=ùì® Z=ùì©
EOF
}
build_pairs_script_bold() {                                                   # script negrito (handwritingbold)
  cat <<'EOF'
a=ùí∂ b=ùí∑ c=ùí∏ d=ùíπ e=ùëí f=ùíª g=ùëî h=ùíΩ i=ùíæ j=ùíø k=ùìÄ l=ùìÅ m=ùìÇ n=ùìÉ o=ùëú p=ùìÖ q=ùìÜ r=ùìá s=ùìà t=ùìâ w=ùìå x=ùìç y=ùìé z=ùìè
A=ùíú B=ùêµ C=ùíû D=ùíü E=ùê∏ F=ùêπ G=ùí¢ H=ùêª I=ùêº J=ùí• K=ùí¶ L=ùêø M=ùëÄ N=ùí© O=ùí™ P=ùí´ Q=ùí¨ R=ùëÖ S=ùíÆ T=ùíØ W=ùí≤ X=ùí≥ Y=ùí¥ Z=ùíµ
0=ùü¢ 1=ùü£ 2=ùü§ 3=ùü• 4=ùü¶ 5=ùüß 6=ùü® 7=ùü© 8=ùü™ 9=ùü´
EOF
}
build_pairs_double_struck() {                                                 # double-struck (chanfrado)
  cat <<'EOF'
a=ùïí b=ùïì c=ùïî d=ùïï e=ùïñ f=ùïó g=ùïò h=ùïô i=ùïö j=ùïõ k=ùïú l=ùïù m=ùïû n=ùïü o=ùï† p=ùï° q=ùï¢ r=ùï£ s=ùï§ t=ùï• w=ùï® x=ùï© y=ùï™ z=ùï´
A=ùî∏ B=ùîπ C=‚ÑÇ D=ùîª E=ùîº F=ùîΩ G=ùîæ H=‚Ñç I=ùïÄ J=ùïÅ K=ùïÇ L=ùïÉ M=ùïÑ N=‚Ñï O=ùïÜ P=‚Ñô Q=‚Ñö R=‚Ñù S=ùïä T=ùïã W=ùïé X=ùïè Y=ùïê Z=‚Ñ§
0=ùüò 1=ùüô 2=ùüö 3=ùüõ 4=ùüú 5=ùüù 6=ùüû 7=ùüü 8=ùü† 9=ùü°
EOF
}
build_pairs_small_caps() {                                                    # small caps (evensized)
  cat <<'EOF'
a=·¥Ä b= ô c=·¥Ñ d=·¥Ö e=·¥á f=Íú∞ g=…¢ h= ú i=…™ j=·¥ä k=·¥ã l= ü m=·¥ç n=…¥ o=·¥è p=·¥ò q=Q r= Ä s=Íú± t=·¥õ u=·¥ú v=·¥† w=·¥° x=x y= è z=·¥¢
A=·¥Ä B= ô C=·¥Ñ D=·¥Ö E=·¥á F=Íú∞ G=…¢ H= ú I=…™ J=·¥ä K=·¥ã L= ü M=·¥ç N=…¥ O=·¥è P=·¥ò Q=Q R= Ä S=Íú± T=·¥õ U=·¥ú V=·¥† W=·¥° X=x Y= è Z=·¥¢
EOF
}
build_pairs_blackboxed() {                                                    # black boxed: mapear min√∫sculas/mai√∫sculas ‚Üí üÖ∞‚Ä¶üÜâ
  cat <<'EOF'
a=üÖ∞ b=üÖ± c=üÖ≤ d=üÖ≥ e=üÖ¥ f=üÖµ g=üÖ∂ h=üÖ∑ i=üÖ∏ j=üÖπ k=üÖ∫ l=üÖª m=üÖº n=üÖΩ o=üÖæ p=üÖø q=üÜÄ r=üÜÅ s=üÜÇ t=üÜÉ u=üÜÑ v=üÜÖ w=üÜÜ x=üÜá y=üÜà z=üÜâ
A=üÖ∞ B=üÖ± C=üÖ≤ D=üÖ≥ E=üÖ¥ F=üÖµ G=üÖ∂ H=üÖ∑ I=üÖ∏ J=üÖπ K=üÖ∫ L=üÖª M=üÖº N=üÖΩ O=üÖæ P=üÖø Q=üÜÄ R=üÜÅ S=üÜÇ T=üÜÉ U=üÜÑ V=üÜÖ W=üÜÜ X=üÜá Y=üÜà Z=üÜâ
EOF
}
build_pairs_circleboxed() {                                                   # circle boxed: a‚Äìz A‚ÄìZ 0‚Äì9
  cat <<'EOF'
a=‚ìê b=‚ìë c=‚ìí d=‚ìì e=‚ìî f=‚ìï g=‚ìñ h=‚ìó i=‚ìò j=‚ìô k=‚ìö l=‚ìõ m=‚ìú n=‚ìù o=‚ìû p=‚ìü q=‚ì† r=‚ì° s=‚ì¢ t=‚ì£ u=‚ì§ v=‚ì• w=‚ì¶ x=‚ìß y=‚ì® z=‚ì©
A=‚í∂ B=‚í∑ C=‚í∏ D=‚íπ E=‚í∫ F=‚íª G=‚íº H=‚íΩ I=‚íæ J=‚íø K=‚ìÄ L=‚ìÅ M=‚ìÇ N=‚ìÉ O=‚ìÑ P=‚ìÖ Q=‚ìÜ R=‚ìá S=‚ìà T=‚ìâ U=‚ìä V=‚ìã W=‚ìå X=‚ìç Y=‚ìé Z=‚ìè
0=‚ì™ 1=‚ë† 2=‚ë° 3=‚ë¢ 4=‚ë£ 5=‚ë§ 6=‚ë• 7=‚ë¶ 8=‚ëß 9=‚ë®
EOF
}

# ---------- especiais (procedurais) ----------
apply_inverse() {                                                             # inverse: mapeia upside-down e reverte string
  local text="$1"                                                              # entrada
  local pairs=(                                                                # pares upside-down b√°sicos
    "a=…ê" "b=q" "c=…î" "d=p" "e=«ù" "f=…ü" "g=∆É" "h=…•" "i=·¥â" "j=…æ" "k= û" "l= É" "m=…Ø" "n=u" "o=o" "p=d" "q=b" "r=…π" "s=s" "t= á" "u=n" "v= å" "w= ç" "x=x" "y= é" "z=z"
    "A=‚àÄ" "B=·ô†" "C=∆Ü" "D=·ó°" "E=∆é" "F=‚Ñ≤" "G=‚ÖÅ" "H=H" "I=I" "J=≈ø" "K= û" "L=À•" "M=W" "N=N" "O=O" "P=‘Ä" "Q=Œå" "R=·¥ö" "S=S" "T=‚ä•" "U=‚à©" "V=Œõ" "W= ç" "X=X" "Y=‚ÖÑ" "Z=Z"
    "0=0" "1=∆ñ" "2=·ÑÖ" "3=∆ê" "4=„Ñ£" "5=œõ" "6=9" "7=„Ñ•" "8=8" "9=6"
  )
  local mapped; mapped="$(map_with_pairs "$text" "${pairs[@]}")"               # aplica mapeamento
  local out=""; for ((i=${#mapped}-1;i>=0;i--)); do out+="${mapped:i:1}"; done # inverte ordem
  printf '%s' "$out"                                                           # retorna
}
apply_witched() {                                                             # witched: adiciona diacr√≠ticos ‚Äúbagun√ßa‚Äù
  local text="$1"                                                              # entrada
  local combo=$'\u0336\u0335\u034f\u0316\u0317\u0334\u0301\u0300'             # marks combinantes
  local out=""; for ((i=0;i<${#text};i++)); do out+="${text:i:1}${combo}"; done # injeta ap√≥s cada char
  printf '%s' "$out"                                                           # retorna
}

# ---------- roteador por $selection ----------
case "$selection" in
  serifbold)         OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_serifbold))"       ;;  # ùêÄ‚Ä¶ùüó
  bold)              OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_bold))"            ;;  # ùòº‚Ä¶ / ùôñ‚Ä¶
  italic)            OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_italic))"          ;;  # ùòê‚Ä¶ / ùò™‚Ä¶
  "italic bold")     OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_italic_bold))"     ;;  # compat
  mono)              OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_mono))"            ;;  # ùôº‚Ä¶ / ùöñ‚Ä¶
  mini)              OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_mini))"            ;;  # ·¥π‚Å±‚Åø‚Å± ‚Ä¶
  oldenglish)        OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_fraktur))"         ;;  # ùîÑ‚Ä¶ / ùîû‚Ä¶
  oldenglishbold)    OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_fraktur_bold))"    ;;  # ùï¨‚Ä¶ / ùñÜ‚Ä¶
  handwriting)       OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_script))"          ;;  # ùìê‚Ä¶ / ùì™‚Ä¶
  handwritingbold)   OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_script_bold))"     ;;  # ùíú‚Ä¶ / ùí∂‚Ä¶
  chanfrado)         OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_double_struck))"   ;;  # ùî∏‚Ä¶ / ùïí‚Ä¶
  evensized)         OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_small_caps))"      ;;  # ·¥¨‚Ä¶ / ·¥Ä‚Ä¶
  blackboxed)        OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_blackboxed))"      ;;  # üÖ∞‚Ä¶ (sempre)
  circleboxed)       OUTPUT="$(map_with_pairs "$INPUT" $(build_pairs_circleboxed))"     ;;  # ‚í∂‚Ä¶ ‚ë†‚Ä¶
  inverse)           OUTPUT="$(apply_inverse "$INPUT")"                                 ;;  # upside-down
  witched)           OUTPUT="$(apply_witched "$INPUT")"                                 ;;  # diacr√≠ticos
  *)                 OUTPUT="$INPUT"                                                    ;;  # fallback
esac

# ---------- colagem: PRIM√ÅRIA (se suportar) OU clipboard com atalho configur√°vel ----------
AESTHETIC_DELAY="${AESTHETIC_DELAY:-0.70}"                                    # espera foco voltar do rofi
PASTE_DELAY="${PASTE_DELAY:-0.06}"                                            # espera curta para propaga√ß√£o
PASTE_MODE="${AESTHETIC_PASTE_SEQ:-auto}"                                     # auto|ctrlv|ctrlshiftv|shiftinsert
USE_CLIP="${AESTHETIC_FALLBACK_CLIP:-1}"                                      # 0 usa PRIM√ÅRIA; 1 usa clipboard (recomendado p/ web)

yd_paste_keys() {                                                             # dispara sequ√™ncia via ydotool
  case "$1" in
    ctrlv)        ydotool key 29:1 47:1 47:0 29:0 ;;                          # Ctrl(29)+V(47)
    ctrlshiftv)   ydotool key 42:1 29:1 47:1 47:0 29:0 42:0 ;;                # Shift(42)+Ctrl(29)+V(47)
    shiftinsert)  ydotool key 42:1 110:1 110:0 42:0 ;;                        # Shift(42)+Insert(110)
    *)            ydotool key 29:1 47:1 47:0 29:0 ;;                          # default: Ctrl+V
  esac
}
decide_mode() {                                                               # heur√≠stica: terminal ‚Üí Ctrl+Shift+V
  case "${PASTE_MODE}" in
    auto)
      if [[ -n "${TERM_PROGRAM:-}" || -n "${KONSOLE_VERSION:-}" || -n "${TERMINAL_EMULATOR:-}" ]]; then
        printf '%s' "ctrlshiftv"                                              # terminal
      else
        printf '%s' "ctrlv"                                                   # campos web/apps comuns
      fi
      ;;
    *) printf '%s' "${PASTE_MODE}";;
  esac
}

if [[ "${SESSION_TYPE}" == "wayland" ]]; then                                 # Wayland
  sleep "${AESTHETIC_DELAY}"                                                  # deixa foco estabilizar
  if [[ "${USE_CLIP}" == "0" ]]; then                                         # tentar PRIM√ÅRIA
    command -v wl-copy >/dev/null 2>&1 || { echo "wl-copy ausente" >&2; exit 1; }
    printf '%s' "$OUTPUT" | wl-copy --primary --paste-once                    # escreve PRIM√ÅRIA
    sleep "${PASTE_DELAY}"                                                    # pequena espera
    ydotool click 2                                                           # middle-click
  else                                                                        # usar clipboard + atalho
    command -v wl-copy >/dev/null 2>&1 || { echo "wl-copy ausente" >&2; exit 1; }
    OLDC="$(wl-paste 2>/dev/null || true)"                                    # salva clipboard atual
    printf '%s' "$OUTPUT" | wl-copy                                           # define clipboard com resultado
    sleep "${PASTE_DELAY}"                                                    # pequena espera
    MODE="$(decide_mode)"                                                     # escolhe sequ√™ncia
    yd_paste_keys "$MODE"                                                     # dispara colagem
    printf '%s' "$OLDC" | wl-copy                                             # restaura clipboard
  fi

elif [[ "${SESSION_TYPE}" == "x11" ]]; then                                   # X11
  if [[ "${USE_CLIP}" == "0" ]]; then                                         # PRIM√ÅRIA
    command -v xclip >/dev/null 2>&1 || { echo "xclip ausente" >&2; exit 1; }
    printf '%s' "$OUTPUT" | xclip -selection primary -i                       # escreve PRIM√ÅRIA
    sleep "${PASTE_DELAY}"                                                    # espera
    xdotool click 2                                                           # middle-click
  else                                                                        # clipboard + Ctrl+V
    OLDX="$(xclip -o -selection clipboard 2>/dev/null || true)"               # salva clipboard
    printf '%s' "$OUTPUT" | xclip -selection clipboard -i                     # define clipboard
    sleep "${PASTE_DELAY}"                                                    # espera
    xdotool key ctrl+v                                                        # cola
    printf '%s' "$OLDX" | xclip -selection clipboard -i                       # restaura clipboard
  fi

else
  echo "Sess√£o desconhecida." >&2; exit 1                                      # ambiente n√£o reconhecido
fi

# ---------- diagn√≥stico opcional ----------
if [[ "${AESTHETIC_DEBUG:-}" == "1" ]]; then                                  # logs quando ativado
  {
    echo "[AESTHETIC] session=${SESSION_TYPE:-unknown}"                        # tipo de sess√£o
    echo "[AESTHETIC] tools: wl-copy=$(command -v wl-copy >/dev/null 2>&1 && echo yes || echo no) ydotool=$(command -v ydotool >/dev/null 2>&1 && echo yes || echo no) xclip=$(command -v xclip >/dev/null 2>&1 && echo yes || echo no) xdotool=$(command -v xdotool >/dev/null 2>&1 && echo yes || echo no)"
    echo "[AESTHETIC] selection='$selection'"                                  # estilo escolhido
    echo "[AESTHETIC] input_len=${#INPUT} output_len=${#OUTPUT}"               # tamanhos
    echo "[AESTHETIC] first20_in='$(printf '%s' "$INPUT"  | head -c 20 | tr '\n' ' ' )'"    # amostra IN
    echo "[AESTHETIC] first20_out='$(printf '%s' "$OUTPUT" | head -c 20 | tr '\n' ' ' )'"   # amostra OUT
  } >> /tmp/aesthetic-debug.log                                                # escreve em /tmp
fi                                                                             # fim
